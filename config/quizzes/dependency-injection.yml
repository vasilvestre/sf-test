category: Dependency Injection
questions:
    -
        question: 'In a modern Symfony application with autowiring, how do you inject a service into another service?'
        answers:
            - {value: 'By type-hinting the service''s class or interface in the constructor.', correct: true}
            - {value: 'By using `<argument type="service" id="my.custom.service" />` in `services.xml`.', correct: false}
            - {value: 'By using `@service_id` in `services.yaml`.', correct: false}
            - {value: 'By calling `$this->container->get(''my.custom.service'')`.', correct: false}
    -
        question: 'Which types of dependency injection are supported by Symfony''s service container?'
        answers:
            - {value: 'Constructor injection', correct: true}
            - {value: 'Setter/Method injection', correct: true}
            - {value: 'Property injection (for public properties)', correct: true}
            - {value: 'Interface injection', correct: false}
    -
        question: 'In `services.yaml`, what is the correct syntax to explicitly inject the `monolog.logger` service into an argument?'
        answers:
            - {value: 'arguments: [''@monolog.logger'']', correct: true}
            - {value: 'arguments: [''%monolog.logger%'']', correct: false}
            - {value: 'arguments: [''monolog.logger'']', correct: false}
            - {value: 'inject: { logger: ''@monolog.logger'' }', correct: false}
    -
        question: 'What is the primary interface for interacting with the service container?'
        answers:
            - {value: 'Psr\Container\ContainerInterface', correct: true}
            - {value: 'Symfony\Component\DependencyInjection\Container', correct: false}
            - {value: 'Symfony\Component\DependencyInjection\ContainerBuilder', correct: false}
            - {value: 'Symfony\Component\DependencyInjection\ServiceLocator', correct: false}
    -
        question: 'In `services.yaml`, how do you configure a service to be lazy-loaded?'
        answers:
            - {value: 'lazy: true', correct: true}
            - {value: 'proxy: true', correct: false}
            - {value: 'shared: false', correct: false}
            - {value: 'fetch: lazy', correct: false}
    -
        question: 'Which method must be implemented in a compiler pass class to modify the service container during compilation?'
        answers:
            - {value: 'process(ContainerBuilder $container)', correct: true}
            - {value: 'compile(ContainerBuilder $container)', correct: false}
            - {value: 'build(ContainerBuilder $container)', correct: false}
            - {value: 'modify(ContainerBuilder $container)', correct: false}
    -
        question: 'Using a compiler pass, how do you get the definition for a service to modify it?'
        answers:
            - {value: '$container->getDefinition(''service.id'')', correct: true}
            - {value: '$container->findDefinition(''service.id'')', correct: true}
            - {value: '$container->get(''service.id'')->getDefinition()', correct: false}
            - {value: '$container->getServiceDefinition(''service.id'')', correct: false}
    -
        question: 'What is the purpose of a compiler pass?'
        answers:
            - {value: 'To modify the service container definition before it is compiled and cached.', correct: true}
            - {value: 'To compile application assets like CSS and JavaScript.', correct: false}
            - {value: 'To validate the syntax of YAML configuration files.', correct: false}
            - {value: 'To run database migrations.', correct: false}
    -
        question: 'In the `dev` environment, where is the compiled and cached service container typically stored?'
        answers:
            - {value: 'var/cache/dev/ContainerXXXXXX/App_KernelDevDebugContainer.php', correct: true}
            - {value: 'app/cache/dev/appDevDebugProjectContainer.php', correct: false}
            - {value: 'var/cache/dev/services.php', correct: false}
            - {value: 'The container is not cached in the dev environment.', correct: false}
    -
        question: 'True or False: Service container parameters can hold array values.'
        answers:
            - {value: 'True', correct: true}
            - {value: 'False', correct: false}
    -
        question: 'What is the correct `services.yaml` syntax to inject the value of the `kernel.project_dir` parameter into a service argument?'
        answers:
            - {value: 'arguments: [''%kernel.project_dir%'']', correct: true}
            - {value: 'arguments: [''@kernel.project_dir'']', correct: false}
            - {value: 'arguments: [''$kernel.project_dir'']', correct: false}
            - {value: 'arguments: [''env(kernel.project_dir)'']', correct: false}
    -
        question: 'By default, are services defined in `services.yaml` public or private?'
        answers:
            - {value: 'Private', correct: true}
            - {value: 'Public', correct: false}
    -
        question: 'True or False: With the default configuration (`shared: true`), every time you request a service from the container, you receive the exact same instance.'
        answers:
            - {value: 'True', correct: true}
            - {value: 'False', correct: false}
    -
        question: 'What does the `autowire: true` default setting in `services.yaml` enable?'
        answers:
            - {value: 'Symfony will automatically pass services to your constructor based on type-hints.', correct: true}
            - {value: 'All services will be made public automatically.', correct: false}
            - {value: 'It automatically generates wiring diagrams for your services.', correct: false}
            - {value: 'It enables wiring of services from third-party bundles.', correct: false}
    -
        question: 'What does the `autoconfigure: true` default setting in `services.yaml` enable?'
        answers:
            - {value: 'Symfony will automatically register your services with the appropriate tags (e.g., as a command, event subscriber, etc.) based on the interfaces they implement.', correct: true}
            - {value: 'It automatically configures the firewall and security settings.', correct: false}
            - {value: 'It generates configuration files for you automatically.', correct: false}
            - {value: 'It configures the application based on environment variables.', correct: false}
