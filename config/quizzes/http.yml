category: HTTP
questions:
    -
        question: 'Which of these is NOT a standard HTTP response header?'
        answers:
            - {value: 'Cache-Control', correct: false}
            - {value: 'Expires', correct: false}
            - {value: 'Last-Modified', correct: false}
            - {value: 'Control-Cache', correct: true}
    -
        question: 'Which method on a `Response` object checks if the `Cache-Control` header is set to `must-revalidate`?'
        answers:
            - {value: '$response->mustRevalidate()', correct: true}
            - {value: '$response->isRevalidating()', correct: false}
            - {value: '$response->getCacheControl()->has(''must-revalidate'')', correct: false}
            - {value: 'This method does not exist.', correct: false}
    -
        question: 'Which method on a `Response` object can be used to check if the status code is in the 2xx range?'
        answers:
            - {value: '$response->isSuccessful()', correct: true}
            - {value: '$response->isOk()', correct: true}
            - {value: '$response->isClientError()', correct: false}
            - {value: '$response->isServerError()', correct: false}
    -
        question: 'How do you access a GET parameter named `foo` from the `Request` object?'
        answers:
            - {value: '$request->query->get(''foo'');', correct: true}
            - {value: '$request->attributes->get(''foo'');', correct: false}
            - {value: '$request->request->get(''foo'');', correct: false}
            - {value: '$request->get(''foo'');', correct: true}
    -
        question: 'How do you access a POST parameter named `bar` from the `Request` object?'
        answers:
            - {value: '$request->request->get(''bar'');', correct: true}
            - {value: '$request->query->get(''bar'');', correct: false}
            - {value: '$request->get(''bar'');', correct: false}
            - {value: '$request->post->get(''bar'');', correct: false}
    -
        question: 'What does the `getLanguages()` method on the `Request` object return?'
        answers:
            - {value: 'An array of languages acceptable for the client, based on the `Accept-Language` header.', correct: true}
            - {value: 'The default locale of the application.', correct: false}
            - {value: 'A list of all available translations.', correct: false}
            - {value: 'The language of the current user''s session.', correct: false}
    -
        question: 'How do you get the value of the `Content-Type` request header?'
        answers:
            - {value: '$request->headers->get(''Content-Type'');', correct: true}
            - {value: '$request->getContentType();', correct: false}
            - {value: '$request->getMimeType();', correct: false}
            - {value: '$request->headers->get(''content_type'');', correct: true}
    -
        question: 'How do you check if a request was made via JavaScript''s `fetch` or `XMLHttpRequest`?'
        answers:
            - {value: '$request->isXmlHttpRequest();', correct: true}
            - {value: '$request->isAjax();', correct: false}
            - {value: '$request->headers->get(''X-Requested-With'') === ''XMLHttpRequest'';', correct: true}
            - {value: 'This cannot be reliably detected.', correct: false}
    -
        question: 'Which of these are valid `Response` subclasses in the HttpFoundation component?'
        answers:
            - {value: 'JsonResponse', correct: true}
            - {value: 'RedirectResponse', correct: true}
            - {value: 'BinaryFileResponse', correct: true}
            - {value: 'StreamedResponse', correct: true}
            - {value: 'XmlResponse', correct: false}
    -
        question: 'Which HTTP status code should be used for a resource that has been permanently moved?'
        answers:
            - {value: '301', correct: true}
            - {value: '302', correct: false}
            - {value: '307', correct: false}
            - {value: '308', correct: true}
    -
        question: 'True or False: A server returns a `403 Forbidden` status code when a client is not authenticated, and a `401 Unauthorized` when the client is authenticated but not allowed to access the resource.'
        answers:
            - {value: 'False', correct: true}
            - {value: 'True', correct: false}
    -
        question: 'Which method on the `Request` object returns the request URI (e.g., `/foo/bar?baz=qux`)?'
        answers:
            - {value: 'getRequestUri()', correct: true}
            - {value: 'getPathInfo()', correct: false}
            - {value: 'getUri()', correct: false}
            - {value: 'getRealUri()', correct: false}
    -
        question: 'How can you set the status code of a `Response` object?'
        answers:
            - {value: 'By passing it as the second argument to the `Response` constructor.', correct: true}
            - {value: 'By calling the `setStatusCode()` method.', correct: true}
            - {value: 'By setting the public `$statusCode` property.', correct: false}
            - {value: 'By adding a `Status-Code` header.', correct: false}
    -
        question: 'To create a custom error page for a `404 Not Found` error for HTML responses, what should you name the Twig template file?'
        answers:
            - {value: 'templates/bundles/TwigBundle/Exception/error404.html.twig', correct: true}
            - {value: 'templates/exceptions/404.html.twig', correct: false}
            - {value: 'templates/error404.html.twig', correct: false}
            - {value: 'views/errors/404.html.twig', correct: false}
    -
        question: 'Which method on the `Request` object gives you the raw request body as a string?'
        answers:
            - {value: 'getContent()', correct: true}
            - {value: 'getBody()', correct: false}
            - {value: 'getRawBody()', correct: false}
            - {value: 'It is not possible to get the raw body.', correct: false}
