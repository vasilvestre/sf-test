category: The Command Line
questions:
    -
        question: 'Which helper, previously available, has been deprecated in modern Symfony versions in favor of the `SymfonyStyle` I/O class?'
        answers:
            - {value: 'QuestionHelper', correct: false}
            - {value: 'TableHelper', correct: false}
            - {value: 'DialogHelper', correct: true}
            - {value: 'ProgressHelper', correct: false}
    -
        question: 'Which of these is NOT a standard event in the Console component?'
        answers:
            - {value: 'ConsoleEvents::COMMAND', correct: false}
            - {value: 'ConsoleEvents::TERMINATE', correct: false}
            - {value: 'ConsoleEvents::ERROR', correct: false}
            - {value: 'ConsoleEvents::LAUNCH', correct: true}
    -
        question: 'How do you get a service from the container inside a command registered with autoconfiguration?'
        answers:
            - {value: 'Inject it into the constructor.', correct: true}
            - {value: 'Use `$this->getContainer()->get(''service.id'')`.', correct: false}
            - {value: 'Use `$this->getApplication()->getKernel()->getContainer()->get(''service.id'')`.', correct: false}
            - {value: 'Implement `ContainerAwareInterface`.', correct: false}
    -
        question: 'Which attribute is used to register a class as a console command in Symfony?'
        answers:
            - {value: '#[AsCommand]', correct: true}
            - {value: '#[ConsoleCommand]', correct: false}
            - {value: '#[Command]', correct: false}
            - {value: '#[AsConsole]', correct: false}
    -
        question: 'Which class provides a stylized I/O experience for console commands (e.g., for creating tables, asking questions)?'
        answers:
            - {value: 'Symfony\Component\Console\Style\SymfonyStyle', correct: true}
            - {value: 'Symfony\Component\Console\Formatter\OutputFormatterStyle', correct: false}
            - {value: 'Symfony\Component\Console\Helper\HelperSet', correct: false}
            - {value: 'Symfony\Component\Console\Input\ArgvInput', correct: false}
    -
        question: 'What is the `maker` command to create a new console command?'
        answers:
            - {value: 'bin/console make:command', correct: true}
            - {value: 'bin/console generate:command', correct: false}
            - {value: 'bin/console make:console', correct: false}
            - {value: 'bin/console new:command', correct: false}
    -
        question: 'Which argument can be passed to the `debug:router` command to filter the output?'
        answers:
            - {value: 'A route name or part of a route name', correct: true}
            - {value: 'A controller name', correct: false}
            - {value: 'A path', correct: false}
            - {value: 'A method (e.g., GET, POST)', correct: false}
    -
        question: 'What is the command to check the syntax of all Twig templates in your application?'
        answers:
            - {value: 'bin/console lint:twig', correct: true}
            - {value: 'bin/console twig:lint', correct: false}
            - {value: 'bin/console debug:twig', correct: false}
            - {value: 'bin/console twig:validate', correct: false}
    -
        question: 'What is the standard console command to clear the application cache?'
        answers:
            - {value: 'bin/console cache:clear', correct: true}
            - {value: 'bin/console clear:cache', correct: false}
            - {value: 'bin/console cache:warmup --clear', correct: false}
            - {value: 'rm -rf var/cache/*', correct: false}
    -
        question: 'When registering a command as a service, what is the name of the tag you should use?'
        answers:
            - {value: 'console.command', correct: true}
            - {value: 'command.console', correct: false}
            - {value: 'symfony.command', correct: false}
            - {value: 'This is handled automatically by the `#[AsCommand]` attribute.', correct: true}
    -
        question: 'What is the command to validate your Doctrine ORM mapping files?'
        answers:
            - {value: 'bin/console doctrine:schema:validate', correct: true}
            - {value: 'bin/console doctrine:mapping:validate', correct:false}
            - {value: 'bin/console orm:validate-schema', correct: false}
            - {value: 'bin/console debug:doctrine', correct: false}
    -
        question: 'How do you display the complete configuration reference for a specific bundle (e.g., `framework`)?'
        answers:
            - {value: 'bin/console config:dump-reference framework', correct: true}
            - {value: 'bin/console debug:config framework', correct: false}
            - {value: 'bin/console config:show framework', correct: false}
            - {value: 'bin/console framework:config:dump', correct: false}
    -
        question: 'What is the `maker` command to create a new Doctrine entity?'
        answers:
            - {value: 'bin/console make:entity', correct: true}
            - {value: 'bin/console doctrine:generate:entity', correct: false}
            - {value: 'bin/console make:doctrine:entity', correct: false}
            - {value: 'bin/console generate:entity', correct: false}
    -
        question: 'What is the command to generate a new database migration based on your entity changes?'
        answers:
            - {value: 'bin/console doctrine:migrations:diff', correct: true}
            - {value: 'bin/console doctrine:schema:update --diff', correct: false}
            - {value: 'bin/console make:migration', correct: false}
            - {value: 'bin/console doctrine:migrations:generate', correct: false}
    -
        question: 'What is the command to execute pending Doctrine migrations?'
        answers:
            - {value: 'bin/console doctrine:migrations:migrate', correct: true}
            - {value: 'bin/console doctrine:schema:update --force', correct: false}
            - {value: 'bin/console doctrine:migrations:execute', correct: false}
            - {value: 'bin/console doctrine:database:update', correct: false}
    -
        question: 'Which verbosity level in a console command is the default?'
        answers:
            - {value: 'OutputInterface::VERBOSITY_NORMAL', correct: true}
            - {value: 'OutputInterface::VERBOSITY_QUIET', correct: false}
            - {value: 'OutputInterface::VERBOSITY_VERBOSE', correct: false}
            - {value: 'OutputInterface::VERBOSITY_DEBUG', correct: false}
    -
        question: 'In a command''s `configure()` method, what are the three possible modes for an `InputArgument`?'
        answers:
            - {value: 'REQUIRED, OPTIONAL, IS_ARRAY', correct: true}
            - {value: 'REQUIRED, OPTIONAL, MULTIPLE', correct: false}
            - {value: 'SINGLE, MULTI, REQUIRED', correct: false}
            - {value: 'MANDATORY, SUGGESTED, REPEATABLE', correct: false}
    -
        question: 'Which method is executed after `configure()` but before `execute()`, allowing you to interact with the user for missing input?'
        answers:
            - {value: 'interact(InputInterface $input, OutputInterface $output)', correct: true}
            - {value: 'initialize(InputInterface $input, OutputInterface $output)', correct: false}
            - {value: 'beforeExecute(InputInterface $input, OutputInterface $output)', correct: false}
            - {value: 'askQuestions(InputInterface $input, OutputInterface $output)', correct: false}
    -
        question: 'Which of these `Question` classes is available in the Console component for asking for user input?'
        answers:
            - {value: 'Symfony\Component\Console\Question\Question', correct: true}
            - {value: 'Symfony\Component\Console\Question\ChoiceQuestion', correct: true}
            - {value: 'Symfony\Component\Console\Question\ConfirmationQuestion', correct: true}
            - {value: 'Symfony\Component\Console\Question\MultilineQuestion', correct: false}
    -
        question: 'How do you correctly call another command from within your command class?'
        answers:
            - {value: 'By finding the command and calling its `run()` method.', correct: true}
            - {value: 'By dispatching a new `ConsoleCommandEvent`.', correct: false}
            - {value: 'By creating a new Process and executing `bin/console ...`.', correct: false}
            - {value: 'By calling `$this->forward(''app:other-command'', $input)`.', correct: false}
