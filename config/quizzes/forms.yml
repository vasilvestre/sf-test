category: Forms
questions:
    -
        question: 'In a form type, how do you render a `DateType` field as a single HTML5 text input?'
        answers:
            - {value: 'Set the `widget` option to `single_text`.', correct: true}
            - {value: 'Set the `html5` option to `true`.', correct: false}
            - {value: 'Set the `input` option to `string`.', correct: false}
            - {value: 'Set the `widget` option to `text`.', correct: false}
    -
        question: 'Which method on a form object processes the incoming request data?'
        answers:
            - {value: '$form->handleRequest($request);', correct: true}
            - {value: '$form->submit($request->request->all());', correct: false}
            - {value: '$form->bind($request);', correct: false}
            - {value: '$form->processRequest($request);', correct: false}
    -
        question: 'From a `Form` object, which method do you call to get a `FormView` object for rendering?'
        answers:
            - {value: '$form->createView()', correct: true}
            - {value: '$form->getView()', correct: false}
            - {value: 'new FormView($form)', correct: false}
            - {value: '$form->render()', correct: false}
    -
        question: 'In a Twig template, which function renders the HTML widget for a single form field?'
        answers:
            - {value: '{{ form_widget(form.fieldName) }}', correct: true}
            - {value: '{{ form_row(form.fieldName) }}', correct: false}
            - {value: '{{ form_field(form.fieldName) }}', correct: false}
            - {value: '{{ form(form.fieldName) }}', correct: false}
    -
        question: 'How is CSRF protection typically enabled for forms in a Symfony application?'
        answers:
            - {value: 'It is enabled by default globally and can be configured per form.', correct: true}
            - {value: 'By manually adding a `CsrfExtension` to the form factory.', correct: false}
            - {value: 'By setting the `csrf_protection` option to `true` on every form.', correct: false}
            - {value: 'By installing the `symfony/security-csrf` component.', correct: false}
    -
        question: 'In a form type''s `configureOptions` method, what is the option to customize the CSRF token field name?'
        answers:
            - {value: 'csrf_field_name', correct: true}
            - {value: 'csrf_token_name', correct: false}
            - {value: '_token_name', correct: false}
            - {value: 'csrf_name', correct: false}
    -
        question: 'What is the form option to customize the error message for an invalid CSRF token?'
        answers:
            - {value: 'csrf_message', correct: true}
            - {value: 'invalid_message', correct: false}
            - {value: 'csrf_error_message', correct: false}
            - {value: 'This must be configured globally.', correct: false}
    -
        question: 'Which form option allows you to specify which validation group(s) to use for a form?'
        answers:
            - {value: 'validation_groups', correct: true}
            - {value: 'groups', correct: false}
            - {value: 'validator_groups', correct: false}
            - {value: 'data_constraint_groups', correct: false}
    -
        question: 'Which of these are valid events in the Form component?'
        answers:
            - {value: 'FormEvents::PRE_SET_DATA', correct: true}
            - {value: 'FormEvents::POST_SET_DATA', correct: true}
            - {value: 'FormEvents::PRE_SUBMIT', correct: true}
            - {value: 'FormEvents::SUBMIT', correct: true}
            - {value: 'FormEvents::POST_SUBMIT', correct: true}
    -
        question: 'In a `PRE_SET_DATA` event listener, what kind of data does `$event->getData()` return?'
        answers:
            - {value: 'The initial model data (e.g., a Doctrine entity or an array).', correct: true}
            - {value: 'The normalized data, after model transformers have run.', correct: false}
            - {value: 'The submitted data from the request.', correct: false}
            - {value: 'Null, because data is not yet set.', correct: false}
    -
        question: 'In a `PRE_SUBMIT` event listener, what kind of data does `$event->getData()` return?'
        answers:
            - {value: 'The raw, submitted data from the request (usually an array of strings).', correct: true}
            - {value: 'The normalized data.', correct: false}
            - {value: 'The model data.', correct: false}
            - {value: 'The form view data.', correct: false}
    -
        question: 'Which built-in form type should you use for a multi-line text input?'
        answers:
            - {value: 'TextareaType', correct: true}
            - {value: 'TextType with a `multiline` option', correct: false}
            - {value: 'MultilineTextType', correct: false}
            - {value: 'StringType', correct: false}
    -
        question: 'Which of these are valid date/time form types?'
        answers:
            - {value: 'DateType', correct: true}
            - {value: 'DateTimeType', correct: true}
            - {value: 'TimeType', correct: true}
            - {value: 'TimestampType', correct: false}
    -
        question: 'How do you associate a validation constraint with a specific form field?'
        answers:
            - {value: 'Using the `constraints` option in the `add()` method of the form builder.', correct: true}
            - {value: 'Using PHP attributes (e.g., `#[Assert\NotBlank]`) on the properties of the underlying data class.', correct: true}
            - {value: 'By calling `$formBuilder->addConstraint(new NotBlank())`.', correct: false}
            - {value: 'By adding a `validation` option to the field.', correct: false}
    -
        question: 'What does setting the `error_bubbling` option to `true` for a field achieve?'
        answers:
            - {value: 'Any errors for that field will be passed up to the parent form, rather than being displayed next to the field.', correct: true}
            - {value: 'It displays errors in a JavaScript alert bubble.', correct: false}
            - {value: 'It prevents errors from being displayed for that field.', correct: false}
            - {value: 'It bubbles the error up to the session flash bag.', correct: false}
    -
        question: 'How do you provide initial data when creating a form?'
        answers:
            - {value: 'Pass the data object as the first argument to `$formFactory->create()` or `$this->createForm()`.', correct: true}
            - {value: 'Pass the data in the `data` option of the `createForm` method.', correct: true}
            - {value: 'Call `$form->setData($data)` after creating the form.', correct: false}
            - {value: 'Set a `default_data` option in the form type.', correct: false}
    -
        question: 'What class should your custom form type classes extend?'
        answers:
            - {value: 'Symfony\Component\Form\AbstractType', correct: true}
            - {value: 'Symfony\Component\Form\FormTypeInterface', correct: false}
            - {value: 'Symfony\Component\Form\BaseFormType', correct: false}
            - {value: 'They do not need to extend any class if they implement `FormTypeInterface`.', correct: false}
    -
        question: 'How do you add a field to a form that is not mapped to a property on the underlying data object?'
        answers:
            - {value: 'Set the `mapped` option to `false` for that field.', correct: true}
            - {value: 'Set the `virtual` option to `true`.', correct: false}
            - {value: 'Prefix the field name with an underscore.', correct: false}
            - {value: 'Use `$formBuilder->addUnmapped()`.', correct: false}
    -
        question: 'How do you render all the unrendered fields of a form in Twig?'
        answers:
            - {value: '{{ form_rest(form) }}', correct: true}
            - {value: '{{ form_end(form) }} will render them automatically.', correct: true}
            - {value: '{{ form_widget(form) }}', correct: false}
            - {value: '{{ form_remaining(form) }}', correct: false}
    -
        question: 'If you use `form_row(form.myField)` in Twig, which parts of the field are rendered by default?'
        answers:
            - {value: 'The label, the widget, and any errors.', correct: true}
            - {value: 'Only the widget (the input element).', correct: false}
            - {value: 'The label and the widget.', correct: false}
            - {value: 'The surrounding `div` element only.', correct: false}
    -
        question: 'According to Symfony best practices, where should you define form buttons like "Submit"?'
        answers:
            - {value: 'In the Twig template.', correct: true}
            - {value: 'In the form type class, using `SubmitType`.', correct: false}
            - {value: 'In the controller, after creating the form.', correct: false}
    -
        question: 'Which of these is a valid, built-in form type?'
        answers:
            - {value: 'HiddenType', correct: true}
            - {value: 'SearchType', correct: true}
            - {value: 'PasswordType', correct: true}
            - {value: 'BirthdayType', correct: true}
            - {value: 'SelectType', correct: false}
            - {value: 'BooleanType', correct: false}
    -
        question: 'How can you disable validation for a form?'
        answers:
            - {value: 'Set the `validation_groups` option to `false` or an empty array.', correct: true}
            - {value: 'Set the `novalidate` attribute in the form options.', correct: false}
            - {value: 'Pass `false` as the third argument to `$form->handleRequest()`.', correct: false}
            - {value: 'Set `validation_disabled: true` in the form type.', correct: false}
    -
        question: 'How do you apply a data transformer to a form field?'
        answers:
            - {value: 'Using the `addModelTransformer()` or `addViewTransformer()` method on the form builder for that field.', correct: true}
            - {value: 'By setting the `model_transformer` option on the field.', correct: false}
            - {value: 'By tagging a service with `form.data_transformer`.', correct: false}
            - {value: 'By adding a `#[Transform]` attribute to the data class property.', correct: false}
    -
        question: 'When handling a file upload, what object type will the form field data be?'
        answers:
            - {value: 'An instance of `Symfony\Component\HttpFoundation\File\UploadedFile`.', correct: true}
            - {value: 'A standard `SplFileObject`.', correct: false}
            - {value: 'A string containing the temporary file path.', correct: false}
            - {value: 'A resource stream.', correct: false}
